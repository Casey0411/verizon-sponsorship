// Convert pixels => rems
@function em($pixels, $base: 10) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($base)) {
		$base: $base * 1px;
	}

	@return $pixels / $base * 1rem;
}
/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}
// Merge multiple maps
@function map-collect($maps...) {
	$collection: ();

	@each $map in $maps {
		$collection: map-merge($collection, $map);
	}
	@return $collection;
}

/// jQuery-style extend function
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
/// @param {Map} $map - first map
/// @param {ArgList} $maps - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
@function map-extend($map, $maps... /*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {
				// If value is a nested map and same key from map is a nested map as well
				@if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
					// Recursive extend
					$value: map-extend(map-get($map, $key), $value, true);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}

	@return $map;
}

// ----------------
// Breakpoint viewport sizes and media queries.
// --------------------------------------------
// From Bootstrap 4: -next, -min, -max, -infix
// Name of the next breakpoint, or null for the last breakpoint.
//
//      >> breakpoint-next(sm)
//      md
//      >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//      md
//      >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//      md
@function breakpoint-next(
	$name,
	$breakpoints-list: $breakpoints,
	$breakpoint-names: map-keys($breakpoints-list)
) {
	$n: index($breakpoint-names, $name);
	@return if(
		$n < length($breakpoint-names),
		nth($breakpoint-names, $n + 1),
		null
	);
}
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//      >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//      576px
@function breakpoint-min($name, $breakpoints-list: $breakpoints) {
	$min: map-get($breakpoints-list, $name);
	@return if($min !=0, $min, null);
}
// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//      >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//      767px
@function breakpoint-max($name, $breakpoints-list: $breakpoints) {
	$next: breakpoint-next($name, $breakpoints-list);
	@return if($next, breakpoint-min($next, $breakpoints-list) - 1px, null);
}
// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//      >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//      ""  (Returns a blank string)
//      >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//      "-sm"
@function breakpoint-infix($name, $breakpoints-list: $breakpoints) {
	@return if(breakpoint-min($name, $breakpoints-list) ==null, '', '-#{$name}');
}
